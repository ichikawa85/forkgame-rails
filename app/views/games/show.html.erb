<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @game.name %>
</p>
<p>
  <strong>Port:</strong>
  <%= @game.port %>
</p>

<body style="margin: 0px; padding: 0px;" ontouchmove="event.preventDefault()">
    <input type="button" value="fork"  style="WIDTH: 400px; HEIGHT: 100px" onclick="fork()">
    <%= button_to "fork", {:action => "fork" ,:id => @game.id}%>
    <br>
    <img id="image" src="screenshot.png">
    <!-- <div class="main_img"></div> -->
    <div id="pad" style="color: #000000; background-color: rgba(0, 0, 255, 0.5);">
    </div>
     <%= javascript_tag do %>
      var port = <%= @game.port - 1%>
	var url = "ws://192.168.0.5:"+port+"/p1";
	var pad = document.getElementById("pad");
	//var W = window.innerWidth, H = window.innerHeight;
	var W = document.documentElement.clientWidth;
	var H = document.documentElement.clientHeight;

	pad.style.width = W+"px";
	pad.style.height = H+"px";
	debug([W,H]);

	var controllerState = {
	x: 0, y: 0,
	nx: 0, ny: 0, nz: -1
	};

	var eventName = {
	mouse: {
        down: "mousedown",
        move: "mousemove",
        up: "mouseup"
	},
	touch: {
        down: "touchstart",
        move: "touchmove",
        up: "touchend"
	}
	};

	var ifType = "ontouchstart" in window ? "touch" : "mouse";
	var events = eventName[ifType];
	var isDown = false;
	var padHandler = function(e) {
	if (!e) {
        controllerState.x = controllerState.y = 0;
        return;
	}
	
	var x, y;
	if (e.changedTouches && e.changedTouches[0]) {
        x = e.changedTouches[0].pageX;
        y = e.changedTouches[0].pageY;
	} else {
        x = e.offsetX;
        y = e.offsetY;
	}
	
	controllerState.x = Math.floor(x / W * 100)-50;
	controllerState.y = Math.floor(y / H * 100)-50;
	/* My addition */
	if(controllerState.x > 0){
      	controllerState.x = 1;
	}else controllerState.x = -1;
	
	if(controllerState.y > 50){
      	controllerState.y = -1;
	}else controllerState.y = 1;
	}

	pad.addEventListener(events.down, function(e) {isDown=true; padHandler(e);});
	pad.addEventListener(events.move, function(e) {
	if (isDown) {padHandler(e)}
	});
	pad.addEventListener(events.up, function(e) {padHandler(null); isDown = false;});

	/* key event */
	document.onkeydown = downEvent;

     function downEvent(evt){
     if(evt.which == 87){
     controllerState.y =  1;
     }else if(evt.which == 83){
     controllerState.y =  -1;
     }
     
     if(evt.which == 68){
     controllerState.x =  1;
     }else if(evt.which == 65){
     controllerState.x =  -1;
     }
     /*
     switch(evt.which){
     case 87: controllerState.y =  1; break; // "W"
     case 65: controllerState.x = -1; break; // "A"
     case 83: controllerState.y = -1; break; // "S"
     case 68: controllerState.x =  1; break; // "D"
     }*/
     }

	var ws;
	wsConnect();

	function wsConnect() {
	// FireFoxとの互換性を考慮してインスタンス化
	if ("WebSocket" in window) {
        ws = new WebSocket(url);
	} else if ("MozWebSocket" in window) {
        ws = new MozWebSocket(url);
	}

	// メッセージ受信時のコールバック関数
	ws.onmessage = function(event){
      	document.getElementById("image").src = "data:image/png;base64,"+event.data
	}

	ws.onopen = function() {
        debug("CONNECTED");
        send();
	}

	ws.onclose = function() {
        console.log("onclose");
        debug("DISCONNECTED");
        // setTimeout(wsConnect, 3000);
	}
	}

	// 終了時に明示的に接続を閉じる
	window.onunload = function(){
	var code = 4500;
	var reason = "client closed";
	ws.close(code, reason);
	}

	function debug(text) {
	pad.innerText = text;
	}

	function send() {
	    var s = controllerState;
	    var m = [s.x, s.y, s.nx, s.ny, s.nz].join(",");
	    if (ws.readyState == ws.OPEN) {
		ws.send(m);
		/* ************ */
                setTimeout(send, 100);
                controllerState.x = 0;
                controllerState.y = 0;
	    }
	}
     <% end %>
</body>

<%= link_to 'Edit', edit_game_path(@game) %> |
<%= link_to 'Back', games_path %>
